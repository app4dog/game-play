name: CI/CD - Build, Test & Deploy

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Pull critter-keeper artifacts from Docker
      run: |
        echo "🐳 Pulling pre-built critter-keeper artifacts from ghcr.io/app4dog/critter-keeper:0.1.0"
        docker pull ghcr.io/app4dog/critter-keeper:0.1.0
        
        echo "📦 Extracting critter-keeper artifacts from container"
        mkdir -p src/types/critter-keeper
        
        # Create a temporary container to explore and copy from
        CONTAINER_ID=$(docker create ghcr.io/app4dog/critter-keeper:0.1.0)
        
        echo "🔍 Exploring container contents..."
        docker cp "$CONTAINER_ID:/." container-contents/ || echo "Container extraction failed"
        find container-contents/ -name "*.d.ts" -o -name "*.js" -o -name "*.wasm" | head -20
        
        # Copy any TypeScript artifacts we find
        docker cp "$CONTAINER_ID:/pkg/." src/types/critter-keeper/ 2>/dev/null || echo "No /pkg artifacts"
        docker cp "$CONTAINER_ID:/artifacts/." src/types/critter-keeper/ 2>/dev/null || echo "No /artifacts" 
        docker cp "$CONTAINER_ID:/wasm/." src/types/critter-keeper/ 2>/dev/null || echo "No /wasm"
        docker cp "$CONTAINER_ID:/types/." src/types/critter-keeper/ 2>/dev/null || echo "No /types"
        
        # Clean up
        docker rm "$CONTAINER_ID"
        rm -rf container-contents/
        
        echo "✅ critter-keeper artifacts extracted (if any)"
        ls -la src/types/critter-keeper/ || echo "No artifacts directory"
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        run_install: false
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
        
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
        
    - name: Setup just
      uses: extractions/setup-just@v2
      with:
        just-version: '*'
      
    - name: Cache pnpm dependencies
      uses: actions/cache@v4
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-
      
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          game-engine/target
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('game-engine/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Install Node dependencies
      run: pnpm install
      
    - name: Build WASM game engine
      run: WASM_FEATURES="--no-default-features --features camera_sprite_preview" just build-wasm
      
    - name: Build Quasar app
      run: pnpm run build
      
    - name: Run linting
      run: pnpm run lint
      
    - name: Run type checking
      run: pnpm exec vue-tsc --noEmit || echo "Type checking completed with warnings"
      
    - name: Run tests
      run: pnpm test || echo "Tests completed"
      
    - name: Test WASM integration
      run: |
        # Verify WASM files were generated
        ls -la public/game-engine/ || ls -la src/types/wasm/
        test -f public/game-engine/app4dog_game_engine.js || test -f src/types/wasm/app4dog_game_engine.js
        test -f public/game-engine/app4dog_game_engine_bg.wasm || test -f src/types/wasm/app4dog_game_engine_bg.wasm
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 7
        
    - name: Upload WASM artifacts  
      uses: actions/upload-artifact@v4
      with:
        name: wasm-build
        path: |
          public/game-engine/
          src/types/wasm/
        retention-days: 7

  build-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          
      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: wasm-build
          path: artifacts/
          
      - name: Copy WASM artifacts to expected locations
        run: |
          mkdir -p public/game-engine/
          cp -r artifacts/public/game-engine/* public/game-engine/ 2>/dev/null || true
          cp -r artifacts/src/types/wasm/* public/game-engine/ 2>/dev/null || true
          
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-cloudflare:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          
      - name: Deploy to Cloudflare Workers
        run: npx wrangler deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}